class Solution {
public:
//tc----->o(m*n)
//sc-->O(m*n)    
bool dfs(int row, int col,vector<vector<int>>&vis, vector<vector<int>>& grid1, vector<vector<int>>& grid2, bool &flag){
    
    int n = grid1.size();   
     int m = grid1[0].size();   
        
    vis[row][col] = 1;
    //if there is water in grid 1
    if(grid1[row][col] == 0)flag=false;
    
    int delrow[] = {-1, 0, +1, 0};
    int delcol[] = {0, +1, 0, -1};
    
    for(int i=0; i<4; i++){
          int nrow = row + delrow[i];
          int ncol = col + delcol[i];
        
        if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && !vis[nrow][ncol] && grid2[nrow][ncol]==1){
            dfs(nrow, ncol, vis, grid1, grid2, flag);
        }
    }
    return flag;
}
    
    
int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2) {
     int n = grid1.size();   
     int m = grid1[0].size();   
        
  vector<vector<int>>vis(n, vector<int>(m, 0));
  int cnt  = 0;          
   for(int i=0; i<n; i++){
       for(int j=0; j<m; j++){
           
        if(grid2[i][j]==1 && !vis[i][j]){
            bool flag = true;
            if(dfs(i, j, vis, grid1, grid2, flag)){
                cnt++;
            }
        }   
       }
   } 
        
    return cnt;
     }
};
