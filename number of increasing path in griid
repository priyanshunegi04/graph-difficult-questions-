class Solution {
public:
    int mod =1e9 +7;
  int solve(int row, int col, vector<vector<int>>&g, vector<vector<int>>&mem){
     long long n = g.size();
      long long m = g[0].size();
    if(row<0 || col<0 || row>=n || col>=m )return 0;
      
    if(mem[row][col] > 0)return mem[row][col];
    
     int curr = 1;
      if(row+1 < n && row+1>=0 && g[row+1][col] > g[row][col]){
          curr =  curr+solve(row+1, col, g, mem);
          curr = curr%mod;
      }
      
      
    if( row-1 <n && row-1>=0 && g[row-1][col] > g[row][col]){
        curr =  curr+ solve( row-1, col, g, mem);
        curr = curr%mod;
    }
    
    if(col +1 < m && col+1 >=0 && g[row][col+1] > g[row][col]){
        curr =  curr + solve(row, col+1, g, mem);
       curr = curr%mod;
    }
    
     
    if(col -1 < m && col-1 >=0 && g[row][col-1] > g[row][col]){
        curr =  curr + solve(row, col-1, g, mem);
      curr = curr%mod;
    }
    
    mem[row][col] = curr;
    return curr;
  } 
    
    int countPaths(vector<vector<int>>& g){
        long long n = g.size();
        long long m = g[0].size();
        vector<vector<int>>mem(n, vector<int>(m,0));
        long long ans = 0;
        
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
             ans = (ans + solve(i, j, g, mem))%mod;   
            }
        }
        return ans;
    }
};
