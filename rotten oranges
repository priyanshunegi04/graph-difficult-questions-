class Solution {
public:
//sc--->O(n*m)
//tc---->O(n*m)
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        queue<pair<pair<int, int>,int>>q;
        int vis[n][m];
        for(int i = 0; i<n; i++){
            for(int j = 0; j<m; j++){
                if( grid[i][j] == 2){   
                    //at zero time these are the guys that were rotten
                 q.push({{i,j}, 0});
                 vis[i][j] = 2; 
                }
                else{
                 vis[i][j] = 0;
                }
        }
    }
        int tm = 0;
            //                  (row-1, col)
            //                /             \
            //       (row, col-1)            (row, col+1)
            //                \              /
            //                   (row+1, col)    
        int delrow[] = {-1, 0 , 1, 0};
        int delcol[] = {0, 1, 0, -1};
        while(!q.empty()){
            int row = q.front().first.first;
            int col = q.front().first.second;
            int t = q.front().second;
            
            tm = max(t, tm);
            q.pop();
            for(int i = 0; i<4; i++){
        
                int nrow = row + delrow[i];
                int ncol = col + delcol[i];
                
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m&&
                  vis[nrow][ncol] !=2 && grid[nrow][ncol] == 1){
                    q.push({{nrow, ncol}, t+1});
                    vis[nrow][ncol] = 2;
                }
            }
        }
        //traverse again if all oranges are rotten or not
        for(int i = 0; i<n; i++){
            for(int j = 0; j<m; j++){
                if(vis[i][j] !=2 && grid[i][j]==1){
                    return -1;
                }
            }
        }
        return tm;
    }
};
