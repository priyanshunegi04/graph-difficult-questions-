class Solution {
  public:
    // Function to return a list containing the DFS traversal of the graph.
   //space complexity------------>o(n) + o(n) + o(n);
   //time complexity------------->o(n) + 2*edges;
   
    void dfs(int node, int vis[], vector<int>adj[], vector<int>&ans){
    vis[node] = 1;    
    ans.push_back(node);    
        
    for(auto it: adj[node]){
        if(!vis[it]){
            dfs(it, vis, adj, ans);
        }
    }    
        
    }
    
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        // Code here
        int vis[V] = {0};
        vector<int>ans;
        int startingnode = 0;
        dfs(startingnode, vis, adj, ans);
        return ans;
        
    }
};
