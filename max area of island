class Solution {
public:
    //tc----->o(n^2);
    //sc----->o(n^2);
 int bfs(int row, int col, vector<vector<int>>& grid, vector<vector<int>>&vis){
    vis[row][col] = 1;  
    int area  = 0; 
    queue<pair<int, int>>q;    
    q.push({row, col});    
        
      int n = grid.size();  
      int m = grid[0].size();  
    
   int delrow[]= {-1,0, +1, 0};
   int delcol[]= {0, +1, 0, -1};
     
       while(!q.empty()){
         int row = q.front().first;  
         int col = q.front().second;  
         q.pop();  
         area++;     
           for(int i = 0; i<4; i++){
               int nrow = row + delrow[i];
               int ncol = col + delcol[i];
               
    if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && !vis[nrow][ncol] && grid[nrow][ncol]==1){
                q.push({nrow, ncol});
                vis[nrow][ncol] = 1;
            }   
           }
       }
       return area;
    }
    
    int maxAreaOfIsland(vector<vector<int>>& grid) {
      int n  = grid.size();  
      int m = grid[0].size();  
      int ans  = 0;  
     vector<vector<int>>vis(n, vector<int>(m, 0));   
      
        for(int row= 0; row<n; row++){
            for(int col = 0; col<m; col++){
                int count  = 0;
              if(!vis[row][col] && grid[row][col] == 1){
               count =   bfs(row, col, grid, vis);
               ans = max(ans, count);  
             }   
            }
        }
        return ans;
    }
};
