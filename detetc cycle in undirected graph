class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool detect(int src, vector<int>&vis, vector<int>adj[]){
        
    vis[src] = 1;        
    //node and parent were inserted
    queue<pair<int, int>>q;     
    q.push({src, -1});    
        
    while(!q.empty()){
        int node = q.front().first;
        int parent = q.front().second;
        q.pop();
        
        
        for(auto it: adj[node]){
            if(vis[it] == 0){
                vis[it] = 1;
                q.push({it, node});
            }
            else if(parent!= it){
                   return true;
            }
        }
    }    
return false;
    }
    
    bool isCycle(int V, vector<int> adj[]) {
    
    vector<int>vis(V, 0);
    for(int i=0; i<V; i++){
        if(!vis[i]){
            if (detect(i,vis, adj))return true;
        }
        
    }
    return false;
    }
};
