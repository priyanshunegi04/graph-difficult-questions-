class Solution {
public:
s.c------>O(m*n);
t.c------>O(m*n);

void bfs(int row, int col,  vector<vector<int>>&vis, vector<vector<int>>& grid ){    
    vis[row][col] = 1;    
    queue<pair<int, int>>q;    
    q.push({row, col});
        
    int n = grid.size();
   int m = grid[0].size();   
     
  int delrow[]= {-1, 0, +1, 0}; 
   int delcol[] = {0, +1, 0, -1};
        
        while(!q.empty()){
            int row = q.front().first;
            int col = q.front().second;
            q.pop();            
             
            for(int i=0; i<4; i++){
                int nrow = row + delrow[i];
                int ncol = col + delcol[i];
                
         if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==0 && !vis[nrow][ncol]){
             vis[nrow][ncol] = 1;
             q.push({nrow, ncol});
         }              
    }
  }
}
    
    int closedIsland(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        
        vector<vector<int>>vis(n, vector<int>(m,0));
        
        //mark boundary 0 visited, as they will be not part of our answer;;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
              if(i==n-1 || i==0 || j==0 || j==m-1){
                  if(grid[i][j] == 0){
                      bfs(i, j, vis, grid);
                  }
              }        
            }        
        }    
      int count = 0;
        
      for(int i=1; i<n-1; i++){
         for(int j=1; j<m-1; j++){
             if(grid[i][j] == 0 && !vis[i][j]){
                 bfs(i, j, vis, grid); 
                 count++;
             }  
          }
      }
        return count;
    }
};
