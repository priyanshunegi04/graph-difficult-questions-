//bit mask concept............
class Solution {
public:
    int shortestPathLength(vector<vector<int>>& graph) {
    int n = graph.size();     
    int all = (1<<n) - 1;    
        
//    vector<int>vis(n,0);  //({node, mask})  
    set<pair<int, int>>vis;
     queue<pair<int,pair<int, int>>>q;  //{node,{dis,mask}}    
    
      for(int i=0; i<n; i++){
          int mask = (1 << i); 
          q.push({i,{0, mask}});
          vis.insert({i,mask});
      }  
        
        //standard BFS
        while(!q.empty()){
            auto data = q.front();
            q.pop();
            
            int node = data.first;
            int dist = data.second.first;
            int mask = data.second.second;
            
            for(auto nbr: graph[node]){
                int newMask = mask|1<<nbr ;
                if(newMask == all){
                    return dist+1;
                }
                else if(vis.count({nbr,newMask})){
                    continue;
                }
                else{
                    vis.insert({nbr, newMask});
                    q.push({nbr,{dist+1, newMask}});
                }
            } 
        }
 return  0;
    }
};
