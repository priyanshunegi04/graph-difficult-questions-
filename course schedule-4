class Solution {
public:
    vector<bool> checkIfPrerequisite(int n, vector<vector<int>>& prerequisites, vector<vector<int>>& queries) {
     
        vector<bool>ans;
        vector<int>indegree(n, 0);
        vector<vector<int>>adj(n);
        for(auto it:prerequisites){
            adj[it[0]].push_back(it[1]);
        }
        
        vector<vector<bool>>table(n, vector<bool>(n,0));
        queue<int>q;
        
        
        for(int i=0; i<n; i++){
            for(auto it:adj[i]){
                indegree[it]++;
            }
        }
        
        
        for(int i=0; i<n; i++){
            if(indegree[i]==0){
                q.push(i);
            }
        }
        
        while(!q.empty()){
            int node = q.front();
            q.pop();
            
            for(auto it:adj[node]){
                table[node][it] = true;
                for(int i=0; i<n; i++){
                    if(table[i][node] == true){
                        table[i][it] = true;
                    }
                }
                
                indegree[it]--;
                if(indegree[it]==0){
                    q.push(it);
                }
            }
        }
        
        
        for(int i=0; i<queries.size(); i++){
            ans.push_back(table[ queries[i][0] ] [ queries[i][1]]);
        }
    return ans;
    }
};
