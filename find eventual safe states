class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        
        int n = graph.size();
        vector<int> adjRev[n];
        vector<int>indegree(n, 0);
        queue<int>q;
        
        for(int i = 0; i<n; i++){
          for( auto it: graph[i] ){
                adjRev[it].push_back(i); 
                indegree[i]++;
          }  
        }
        
      vector<int>safenodes;  
      for(int i = 0; i<n; i++){
          if(indegree[i]==0){
              q.push(i);
          }
      }
        
     while(!q.empty()){
         int node = q.front();
         safenodes.push_back(node);
         q.pop();
         
         for(auto i:adjRev[node]){
             indegree[i]--;
             if(indegree[i]==0){
                 q.push(i);
             }
         }
     }   
        
      sort(safenodes.begin(), safenodes.end());  
        
        return safenodes;
    }
};
